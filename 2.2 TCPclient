/* A simple TCP client */
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#def ine SERVER_TCP_PORT 3000/* well-known port */
#define BUFLEN 256 /* buffer length */
int main(int argc, char **argv) 
{
  int n, bytes_to_read;\\
  int sd, port;\\
  struct sockaddr_in server;\\
  struct hostent *hp;\\
  char *host, *bp, rbuf [BUFLEN],sbuf [BUFLEN];\\

  switch(argc) {
  case 2:\\
    host=argv[1];
    port = SERVER_TCP_PORT;
    break;
  case 3:\\
    host=argv[1];
    port = atoi(argv[2]);
    break;
  default:
    fprintf(stderr, "Usage: %s [port]\n", argv[0]);
    exit(1);
  }
    /* Create a stream socket */
  if ((sd = socket (AF_INET, SOCK_STREAM, 0)) ==-1) {
    fprintf(stderr, "Can't create a socket\n") ;
    exit(1);
  }
  
  /* Bind an address to the socket */
  bzero ((char *)&server, sizeof(struct sockaddr_in));
  server.sin_family = AF_INET;
  server.sin_port = htons(port);
  if ((hp = gethostbyname (host)) == NULL) { 
    fprintf(stderr, "Can't get server's address\n");
    exit (1);
  }
  bcopy (hp->h_addr, (char *)&server.sin_addr,hp->_length);
  
  /* Connectinq to the server */
if (connect(sd, (struct sockaddr *)&server,
  sizeof(server)) ==-1) {
    fprintf(stderr, "Can't bind name to socket\n");
    exit (1);
  }
    printf("Connected: server's address is s\n",hp->_name);
    printf("Transmit:\n");/* get user's text */ 
    write (sd, sbuf, BUFLEN) ;/* send it out */
    printf ("Receive:\n");
    bp = rbuf;
    bytes_to_read = BUFLEN;
    while ((n = read (sd, bp , bytes_to_read)) >Â 0) { 
      bp +=n;
      bytes_to_read -=n;
    }
    printf ("os\n", rbuf);
    close (sd);
    return(0);
}

  
  
  
  
  
  
  
