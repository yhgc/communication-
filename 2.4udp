/* A simple UDP client which measures round trip delay */ 
#include <stdio.h>
#include <string.h>
#include <sys/time.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#define SERVER_UDP_PORT 5000
#define MAXLEN 4096 /*maximum data length */
#define DEFLEN 64 /*default length */
Long delay(struct timeval tl, struct timeval t2);
int main(int argc, char **argv) 
{
  int data_size = DEFLEN, port = SERVER_UDP PORT;
  int i, j, sd, server_len;
  char *pname, *host, rbuf [MAXLEN] , sbuf [MAXLEN] ;
  struct hostent*hp;
  struct sockaddr_inserver, client;
  struct timevalstart, end;
  pname = argv [0] ;
  argc--;
  argv++;
  if (argc > 0 && (strcmp (*argv, "-s") ==0)) {
    if (--argc > 0 && (data_size = atoi(*++argv) )) 
      argc--;
      argv++;
    }
    else {
      printf (stderr,"Usage: %s [-s data_size] host [port]\n", pname);
      exit (1);
    }
  }
  if (argc > 0) {
    host =*argv;
    if (--argc > 0)
      port = atoi(*++argv);
  }
  else { 
  fprintf(stderr,"Usage: %s [-s data-size] host [port]\n", pname);
  exit (1);
  } 
/* Create a datagram socket */
  if ((sd = socket (AF INET, SOCK_DGRAM, 0)) ==-1) { 
  fprintf(stderr, "Can't create a socket\n");
  exit (1);
}
/* store server's information */
  bzero((char *)&server, sizeof(server));
  server.sin_family = AF_INET;
  server.sin_port = htons(port);
  if ((hp = gethostbyname (host)) == NULL) {
    fprintf(stderr,"can't get server's IP address\n");
    exit (1);
  }
  bcopy(hp->h_addr, (char *)&server.sin_addr,hp->_length);
  
  /* Bind local address to the socket */
  bzero((char *)&client, sizeof(client));
  client.sin_family =AF_INET;
  client.sin_port = htons (0);
  client.sin_addr.s_addr = hton1 (INADDR ANY);
  if (bind(sd, (struct sockaddr *)&client,sizeof (client)) ==-1) {
  fprintf (stderr,"Can't bind name to socket\n");
  exit(1);
}
if(data_size>MAXLEN){
  fprintf(stderr, " data is tpp big.\n);
  exit(1);
}
/* data is a, b, c, ..., z, a, b, ....*?
for (i =0;i < data_size;i++) {
  j= (i< 26) ? i : i% 26;
  sbuf [i] = "a" +j;
}
gettimeofday(&start, NULL) ;/* start delay measure */

/* transmit data*/ 
server_len = sizeof (server);
if (sendto(sd, sbuf, data_size, o, (struct sockaddr *)&server, server_len) ==-1) {
  fprintf(stderr,"sendto error\n");
  exit(1);
}

/* receive data */ 
if (recvfrom(sd, rbuf, MAXLEN, 0, (struct sockaddr *) 
  &server, &server_lens) < 0) {
  fprintf(stderr,"recvfrom error\n");
  exit (1);
}
gettimeofday(&end, NULL);/* end delay measure */
printf ("Round-trip delay =号ld ms.\n",delay(start, end));
if (strncmp (sbuf, rbuf, data-size) !=0) 
  printf ("Data is corrupted\n");
close (sd);
return(0);
/*Compute the delay between t1 and t2 in milliseconds*/
long delay (struct timeval t1, struct timeval t2)
{
  long d;
  a = (t2.tv_sec-t1.tv_sec) * 1000;
  l+= ((t2.tv_usec -tl.tv_usec + 500) / 1000);
  return(d);
}

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
